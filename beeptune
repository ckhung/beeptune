#!/usr/bin/perl -w
# Author: Chao-Kuei Hung
# License: GNU General Public License 3 or newer
# Homepage: http://ckhung.github.com/beeptune/

use Getopt::Std;
use strict;
use Time::HiRes qw(usleep);
my (%opts, $level);
my (
    $click,		# duration of a click, in milliseconds
    $base,		# each pitch is ofsetted by this number.
			# $base=-12 makes the tune play at 1 octave lower
) = (
    100,
    12,
);

%opts = (
    s => 1.0,		# speed factor. 2.0 means twice faster
			# -c 3.0 makes the tune play 3 times slower
    b => 0,		# $base is ofsetted by this number.
			# -b 24 makes the tune play at 2 octaves higher
);
getopts('b:s:', \%opts);

while (<>) {
    s/#.*//;
    next if /^\s*$/;
    my ($pitch, $arg) = split " ";
    if ($pitch eq 'base') {
	$base = $arg;
    } elsif ($pitch eq 'click') {
	$click = $arg;
    } else {
	if (not $arg =~ /^\d+(\.\d*)?$/) {
	    printf STDERR "skipping unrecognized duration '$arg'\n";
	    next;
	}
	if ($pitch eq 'pause') {
	    $arg *= $click / $opts{s};
	    usleep($arg*1000);
	} elsif ($pitch =~ /^-?\d+$/) {
	    $pitch = freq($pitch + $base + $opts{b});
	    $arg *= $click / $opts{s};
	    die if system("beep -f $pitch -l $arg");
	    # to honor ctrl-c -- see http://www.perlmonks.org/?node_id=722571
	} else {
	    printf STDERR "skipping unrecognized pitch or command '$pitch'\n";
	    next;
	}
    }
}

sub freq {
    my ($f) = @_;
    my ($octave) = 0;
    if ($f < 0) {
	$octave = int($f/12) - 1;
	$f -= $octave*12;
    }
    my ($x) = int($f/12);
    $octave += $x;
    $f -= $x*12;
    my (@freq) = (
	261.6, 277.2, 293.7, 311.1, 329.6, 349.2,
	370.0, 392.0, 415.3, 440.0, 466.2, 493.9,
    );
    $f = $freq[$f];
    $f /= 2 while ($octave++ < 0);
    --$octave;
    $f *= 2 while ($octave-- > 0);
    return $f;
}

